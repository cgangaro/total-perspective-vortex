import mne
from mne.datasets import eegbci
import matplotlib
import matplotlib.pyplot as plt
from preprocessing.preprocessing import Preprocessing
from preprocessing.newPreprocessing import NewPreprocessing
from preprocessing.featureExtraction import FeatureExtraction
from mne.decoding import CSP
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
from sklearn.model_selection import cross_val_score, KFold, LeaveOneGroupOut
from sklearn.pipeline import Pipeline
from cspTransformer import CSPTransformer
from dataclasses import dataclass
import numpy as np
matplotlib.use("webagg")


@dataclass
class Configuration:
    ICA: bool
    EOG: bool


def main():
    try:
        config = Configuration(ICA=False, EOG=False)
        subjects = [1, 2, 3, 4, 5]
        runs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
        montage_kind = "standard_1005"
        # montage_kind = "biosemi64"
        low_cutoff = 8.
        high_cutoff = 40.
        notch_freq = 60
        n_ica_components = 20
        # experiments = {
        #     0: [1, 2],     # Baseline
        #     1: [3, 7, 11], # Task 1
        #     2: [4, 8, 12], # Task 2
        #     3: [5, 9, 13], # Task 3
        #     4: [6, 10, 14],# Task 4
        # }
        # all_scores = []

        X_list = []
        labels_list = []
        groups = []

        # original_raw, events, event_dict = Preprocessing.initRawFiles2(subject, run)
        original_raw, events, event_id = NewPreprocessing.load_all_data(subjects, runs)
        print("Event ID: ", event_id)
        print("Events: ", events)

        print("Make montage: ", montage_kind)
        original_raw = Preprocessing.makeMontage(original_raw, montage_kind, False)

        # original_raw.plot(n_channels=5, scalings='auto', title='Données EEG brutes', show=True, block=True)
        # Preprocessing.displayPSD(original_raw, "Donnees EEG brutes")

        raw = original_raw.copy()
        rawFiltered = Preprocessing.filterRawData(raw, low_cutoff, high_cutoff, notch_freq)
        # rawFiltered.plot(n_channels=5, scalings='auto', title='Données EEG filtrées', show=True)
        # Preprocessing.displayPSD(rawFiltered, "Donnees EEG filtrees")

        # fig = mne.viz.plot_events(events, sfreq=raw.info['sfreq'], first_samp=raw.first_samp, event_id=event_id)
        if config.ICA:
            rawFiltered = FeatureExtraction.ICAProcess(rawFiltered, n_ica_components, config.EOG)

        tmin, tmax = -1., 4.
        epochs = mne.Epochs(rawFiltered, events, event_id=event_id, tmin=tmin, tmax=tmax, baseline=None, preload=True)
        # epochs.plot_drop_log()

        print("event_id: ", event_id)
        # event_ids_to_keep = ['T1', 'T2']
        labels = epochs.events[:, -1]
        print("labels: ", labels)
        # newEpochs = epochs[event_ids_to_keep]
        # print("Events in newEpochs: ", newEpochs.events)
        # newLabels = newEpochs.events[:, -1]
        # print("newLabels: ", newLabels)

        # epochs.plot(n_channels=5, title="Epochs filtrés")

        # bands = {'alpha': (8, 12), 'beta': (12, 30), 'gamma': (30, 45)}
        # band_powers = FeatureExtraction.extractBandPower(epochs, bands)
        # # band_powers.items() retourne un dictionnaire où chaque clé est une bande de fréquence (alpha, beta, gamma).
        # # Chaque valeur est un tableau 2D où chaque ligne correspond à une epoch et chaque colonne à un canal EEG (electrode).

        # for band, power in band_powers.items():
        #     print(f"{band} band power for each epoch:", power)

        # freqs = np.logspace(*np.log10([6, 30]), num=15)
        # wavelet_power = WaveletAnalysis.apply_wavelet_transform(epochs, freqs)

        # # Visualisation de l'analyse par ondelettes
        # wavelet_power.plot_topo(baseline=(-0.5, 0), mode='logratio', title='Analyse par ondelettes')

        # Préparation des données
        X = epochs.get_data()  # Forme : (n_epochs, n_channels, n_times)
        labels = epochs.events[:, -1] - 1  # Labels : [0, 1, 2]

        # Création des groupes (un groupe par sujet)
        groups = epochs.metadata['subject']

        # Définition du classifieur
        csp_pipeline = Pipeline([
            ('csp', CSPTransformer(n_components=4)),  # Vous pouvez augmenter le nombre de composantes
            ('lda', LDA())
        ])

        # # Validation croisée LeaveOneGroupOut
        # logo = LeaveOneGroupOut()
        # scores = cross_val_score(csp_pipeline, X, labels, cv=logo, groups=groups, scoring='accuracy')
        # print(f"Précision moyenne sur tous les sujets : {scores.mean():.2f} ± {scores.std():.2f}")
        return
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
